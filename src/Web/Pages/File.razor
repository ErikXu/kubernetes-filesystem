@page "/files"
@inject HttpClient Http

<h1>Files</h1>

<div class="clearfix" style="margin-bottom:20px;">
    <div style="margin-right:20px; float:left;">
        <span>Cluster:</span>
        <select class="form-select" @onchange="ClusterSelectionChanged">
            <option value="" selected>Please select...</option>
            @foreach (var cluster in _clusters)
            {
                <option value="@cluster.Name">@cluster.Name</option>
            }
        </select>
    </div>
    <div style="margin-right:20px; float:left;">
        @if (_showNamespace)
        {
            <span>Namespace:</span>
            <select class="form-select" @onchange="NamespaceSelectionChanged">
            <option value="" selected>Please select...</option>
            @foreach (var item in _namespaces)
                {
                    <option value="@item">@item</option>
                }
            </select>
        }
    </div>
    <div style="margin-right:20px; float:left;">
        @if (_showPod)
        {
            <span>Pods:</span>
            <select class="form-select" @onchange="PodSelectionChanged">
            <option value="" selected>Please select...</option>
            @foreach (var pod in _pods)
                {
                    <option value="@pod">@pod</option>
                }
            </select>
        }
    </div>
    <div style="margin-right:20px; float:left;">
        @if (_showContainer)
        {
            <span>Containers:</span>
            <select class="form-select" @onchange="ContainerSelectionChanged">
            <option value="" selected>Please select...</option>
            @foreach (var container in _containers)
                {
                    <option value="@container">@container</option>
                }
            </select>
        }
    </div>
</div>

<div class="clearfix" style="margin-bottom:20px;">
    <span style="margin-right:20px;">Path: @_dir</span>
</div>

<div class="clearfix" style="margin-bottom:20px;">
    <div style="margin-right:20px; float:left;">
        <button type="button" class="btn btn-outline-success btn-sm" @onclick="Up"><span class="oi oi-folder"></span> Back</button> 
    </div>
    <div style="margin-right:20px; float:left;">
        <button type="button" class="btn btn-outline-primary btn-sm"><span class="oi oi-data-transfer-upload"></span> Upload</button>
    </div>
</div>

    <table class="table">
    <thead>
        <tr>
            <th>Permission</th>
            <th>Links</th>
            <th>Owner</th>
            <th>Group</th>
            <th>Size</th>
            <th>Time</th>
            <th>Name</th>
            <th>Operation</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var file in _files)
            {
                <tr>
                    <td>@file.Permission</td>
                    <td>@file.Links</td>
                    <td>@file.Owner</td>
                    <td>@file.Group</td>
                    <td>@file.Size</td>
                    <td>@(file.Date + " " + file.Time)</td>
                    <td>@file.Name</td>
                    <td>
                        @if (file.Permission.StartsWith("-"))
                        {
                            <a href="@DownloadUrl(file)" download="@file.Name" target="=_blank"><button type="button" class="btn btn-outline-primary btn-sm"><span class="oi oi-data-transfer-download"></span> Download</button></a>
                        }
                        else if (file.Permission.StartsWith("d"))
                        {
                            <button type="button" class="btn btn-outline-success btn-sm" @onclick="() => Enter(file)"><span class="oi oi-folder"></span> Open</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

@code {
    private string _dir = "/";

    private List<ClusterItem> _clusters = new List<ClusterItem>();
    private string _cluster;

    private bool _showNamespace = false;
    private List<string> _namespaces = new List<string>();
    private string _namespace;

    private bool _showPod = false;
    private List<string> _pods = new List<string>();
    private string _pod;

    private bool _showContainer = false;
    private List<string> _containers = new List<string>();
    private string _container;

    private List<FileItem> _files = new List<FileItem>();

    protected override async Task OnInitializedAsync()
    {
        _clusters = await Http.GetFromJsonAsync<List<ClusterItem>>("api/clusters");
    }

    protected async Task ClusterSelectionChanged(ChangeEventArgs e)
    {
        _showNamespace = false;
        _namespace = "";
        _namespaces = new List<string>();

        _showPod = false;
        _pod = "";
        _pods = new List<string>();
        
        _showContainer = false;
        _container = "";
        _containers = new List<string>();

        _dir = "/";
        _files = new List<FileItem>();
        
        _cluster = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(_cluster))
        {
            _namespaces = await Http.GetFromJsonAsync<List<string>>($"api/namespaces?cluster={_cluster}");
            _showNamespace = true;
        }
    }

    protected async Task NamespaceSelectionChanged(ChangeEventArgs e)
    {
        _showPod = false;
        _pod = "";
        _pods = new List<string>();
        
        _showContainer = false;
        _container = "";
        _containers = new List<string>();

        _dir = "/";
        _files = new List<FileItem>();

        _namespace = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(_namespace))
        {
            _pods = await Http.GetFromJsonAsync<List<string>>($"api/pods?cluster={_cluster}&namespace={_namespace}");
            _showPod = true;
        }
    }

    protected async Task PodSelectionChanged(ChangeEventArgs e)
    {
        _showContainer = false;
        _container = "";
        _containers = new List<string>();

        _dir = "/";
        _files = new List<FileItem>();

        _pod = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(_pod))
        {
            _containers = await
            Http.GetFromJsonAsync<List<string>>($"api/containers?cluster={_cluster}&namespace={_namespace}&pod={_pod}");
            _showContainer = true;
        }
    }

    protected async Task ContainerSelectionChanged(ChangeEventArgs e)
    {
        _dir = "/";
        _files = new List<FileItem>();

        _container = e.Value.ToString();
        if (!string.IsNullOrWhiteSpace(_container))
        {
            _files = await
            Http.GetFromJsonAsync<List<FileItem>>($"api/files?cluster={_cluster}&namespace={_namespace}&pod={_pod}&container={_container}&dir={_dir}");
        }
    }

    protected async Task Enter(FileItem file)
    {
        _dir = System.IO.Path.Combine(_dir, file.Name);
        _files = await
            Http.GetFromJsonAsync<List<FileItem>>($"api/files?cluster={_cluster}&namespace={_namespace}&pod={_pod}&container={_container}&dir={_dir}");
    }

    protected async Task Up()
    {
        if (_dir != "/")
        {
            _dir = _dir.TrimEnd('/');
            _dir = _dir.Substring(0, _dir.LastIndexOf("/") + 1);
            _files = await
            Http.GetFromJsonAsync<List<FileItem>>($"api/files?cluster={_cluster}&namespace={_namespace}&pod={_pod}&container={_container}&dir={_dir}");
        }
    }

    protected string DownloadUrl(FileItem file)
    {
        var path = System.IO.Path.Combine(_dir, file.Name);
        return $"api/files/download?cluster={_cluster}&namespace={_namespace}&pod={_pod}&container={_container}&path={path}";
    }


    public class ClusterItem
    {
        public string Name { get; set; }
    }

    public class FileItem
    {
        public string Permission { get; set; }
        public string Links { get; set; }
        public string Owner { get; set; }
        public string Group { get; set; }
        public string Size { get; set; }
        public string Date { get; set; }
        public string Time { get; set; }
        public string Name { get; set; }
    }
}
